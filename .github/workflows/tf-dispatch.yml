name: "Terraform Infrastructure Pipeline"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The environment to deploy (e.g., dev, test, prod)"
        required: true
        default: "dev"
        type: string

      working_dir:
        description: "Working directory for Terraform"
        required: true
        type: string

      backend_config_path:
        description: "Path to the backend config file"
        required: true
        type: string

      backend_key:
        description: "Key for the backend configuration"
        required: true
        type: string

      plan_only:
        description: "Run Terraform plan only"
        required: false
        default: true
        type: boolean

      destroy:
        description: "Destroy the infrastructure"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write  # Ensure correct permission if modifying repo content or using tokens

jobs:
  # 1. Checkout with full depth to access the repository history
  checkout_code:
    name: Checkout Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for the repo

  # 2. SonarQube Analysis for Development Environment Only
  sonar_analysis:
    name: SonarQube Quality Scanner
    if: ${{ github.event.inputs.environment == 'dev' }}  # Only run for dev environment
    runs-on: ubuntu-latest
    needs: checkout_code
    steps:
      - name: Run SonarQube Scan for Terraform
        uses: bayer-int/ph-rd-time-tracking-workflows/.github/workflows/sonarqube-quality-scanner.yml@main
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}  # Ensure secret exists in the repository
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Ensure Sonar token is available
        with:
          args: >  # Custom SonarQube arguments for Terraform scanning
            -Dsonar.organization=ORG_NAME
            -Dsonar.projectKey=Sonar_Project_Key

  # 3. Terraform Pipeline Call
  call_terraform_pipeline:
    name: Terraform Pipeline
    runs-on: ubuntu-latest
    uses: bayer-int/ph-rd-time-tracking-workflows/.github/workflows/terraform-deploy.yml@main
    with:
      environment: ${{ github.event.inputs.environment }}
      working_dir: ${{ github.event.inputs.working_dir }}
      backend_config_path: ${{ github.event.inputs.backend_config_path }}
      backend_key: ${{ github.event.inputs.backend_key }}
      plan_only: ${{ github.event.inputs.plan_only }}
      destroy: ${{ github.event.inputs.destroy }}
    secrets:
      org_repos_internal_read_only: ${{ secrets.org_repos_internal_read_only }}
      aws_oidc_assume_role: ${{ secrets.aws_oidc_assume_role }}
      tf_env_vars: ${{ secrets.tf_env_vars }}

  # 4. Generate Deployment Report after Terraform Call
  generate_deployment_report:
    name: Generate Deployment Report
    runs-on: ubuntu-latest
    needs: call_terraform_pipeline
    steps:
      - name: Generate Deployment Summary
        run: |
          echo "# Infra Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "| Run Number | Environment | Author | Deploy Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|-------------|--------|---------------|" >> $GITHUB_STEP_SUMMARY
          echo "| ${{ github.run_number }} | ${{ github.event.inputs.environment }} | ${{ github.actor }} | success |" >> $GITHUB_STEP_SUMMARY
          echo "Job summary generated at run-time" >> $GITHUB_STEP_SUMMARY
